{"version":3,"file":"static/js/255.8e101ce3.chunk.js","mappings":"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","sources":["components/pages/ResultPage.jsx","helpers/constants/index.js","helpers/functions/index.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Row, Card, CardBody, Button } from \"reactstrap\";\r\nimport { Colxx } from \"components/common/Colxx\";\r\nimport { TIMER_LIMIT } from \"helpers/constants\";\r\nimport { average } from \"helpers/functions\";\r\nconst ResultPage = ({ selectedAnswers }) => {\r\n  const [numCorrect, setNumCorrect] = useState(0);\r\n  const [quickestAnswer, setQuickestAnswer] = useState(0);\r\n  const [longestAnswer, setLongestAnswer] = useState(TIMER_LIMIT);\r\n  const [averageTimeSpent, setAverageTimeSpent] = useState(TIMER_LIMIT);\r\n\r\n  const findCorrectAnswers = (selectedAnswers) => {\r\n    let totalCorrectAnswers = 0;\r\n    let timeSpent = [];\r\n    selectedAnswers.map((item) => {\r\n      timeSpent.push(item.timeSpent);\r\n      if (item.correct) {\r\n        totalCorrectAnswers++;\r\n      }\r\n    });\r\n    if (timeSpent.length > 0) {\r\n      let min = Math.min(...timeSpent);\r\n      let max = Math.max(...timeSpent);\r\n      let avg = average(timeSpent);\r\n      setQuickestAnswer(min);\r\n      setLongestAnswer(max);\r\n      setAverageTimeSpent(avg);\r\n    }\r\n    setNumCorrect(totalCorrectAnswers);\r\n  };\r\n  useEffect(() => {\r\n    findCorrectAnswers(selectedAnswers);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <Card className=\"result-card\">\r\n        <CardBody>\r\n          <h4 className=\"mb-2\">Your Result</h4>\r\n          <Row>\r\n            <Colxx>\r\n              <h4 className=\"result-text\">\r\n                Number of correct answers : {numCorrect}\r\n              </h4>\r\n            </Colxx>\r\n          </Row>\r\n          <Row>\r\n            <Colxx>\r\n              <h4 className=\"result-text\">\r\n                Number of incorrect answers :{\" \"}\r\n                {selectedAnswers.length - numCorrect}\r\n              </h4>\r\n            </Colxx>\r\n          </Row>\r\n          <Row>\r\n            <Colxx>\r\n              <h4 className=\"result-text\">\r\n                Number questions unanswered : {10 - selectedAnswers.length}\r\n              </h4>\r\n            </Colxx>\r\n          </Row>\r\n          {selectedAnswers.length > 0 && (\r\n            <>\r\n              <div className=\"mt-4 mb-2\">\r\n                <h4>Statistics About Answered Questions</h4>\r\n              </div>\r\n              {\r\n                <Row>\r\n                  <Colxx>\r\n                    <h4 className=\"result-text\">\r\n                      {quickestAnswer < 1 ? (\r\n                        <>Quickest answering time : Less than 1 second</>\r\n                      ) : (\r\n                        <>\r\n                          Quickest answering time : {quickestAnswer} second(s){\" \"}\r\n                        </>\r\n                      )}\r\n                    </h4>\r\n                  </Colxx>\r\n                </Row>\r\n              }\r\n              <Row>\r\n                <Colxx>\r\n                  <h4 className=\"result-text\">\r\n                    {longestAnswer < 1 ? (\r\n                      <>Longest answering time : Less than 1 second</>\r\n                    ) : (\r\n                      <>Longest answering time : {longestAnswer} second(s)</>\r\n                    )}\r\n                  </h4>\r\n                </Colxx>\r\n              </Row>\r\n              <Row>\r\n                <Colxx>\r\n                  <h4 className=\"result-text\">\r\n                    {averageTimeSpent < 1 ? (\r\n                      <>Average answering time : Less than 1 second</>\r\n                    ) : (\r\n                      <>Average answering time : {averageTimeSpent} second(s)</>\r\n                    )}\r\n                  </h4>\r\n                </Colxx>\r\n              </Row>\r\n            </>\r\n          )}\r\n          <Row className=\"d-flex justify-content-center mt-3\">\r\n            <Colxx md=\"12\" lg=\"5\">\r\n              <Button\r\n                className=\"button-custom mt-2\"\r\n                onClick={() => window.location.reload(false)}\r\n              >\r\n                Try Again\r\n              </Button>\r\n            </Colxx>\r\n          </Row>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\nexport default ResultPage;\r\n","export const TIMER_LIMIT = 15\r\nexport const QOUESTION_LIMIT = 10\r\nexport const ADDED_TIME = 10","\r\n\r\nexport const randomize = (list = [], range = 0) => {\r\n    let questionList = [];\r\n    let tmp = [];\r\n    if (list && range) {\r\n        while (questionList.length < range) {\r\n            tmp.push(\r\n                list.splice(Math.floor(Math.random() * list.length - 1), 1)[0]\r\n            );\r\n            questionList.push(tmp.pop());\r\n        }\r\n    }\r\n    return (questionList);\r\n\r\n};\r\nexport const total = (arr) => {\r\n    let sum = 0;\r\n    if (arr) {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            sum = sum + arr[i]\r\n        }\r\n    }\r\n    return (sum);\r\n}\r\n\r\nexport const average = (arr) => {\r\n    let avg = 0;\r\n    if (arr) {\r\n        if (arr.length > 0) {\r\n            avg = Math.round(total(arr) / arr.length)\r\n\r\n        }\r\n    }\r\n    return (avg);\r\n}"],"names":["selectedAnswers","useState","numCorrect","setNumCorrect","quickestAnswer","setQuickestAnswer","TIMER_LIMIT","longestAnswer","setLongestAnswer","averageTimeSpent","setAverageTimeSpent","useEffect","totalCorrectAnswers","timeSpent","map","item","push","correct","length","min","Math","max","avg","average","findCorrectAnswers","className","md","lg","onClick","window","location","reload","QOUESTION_LIMIT","ADDED_TIME","randomize","list","range","questionList","tmp","splice","floor","random","pop","arr","round","sum","i","total"],"sourceRoot":""}